// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: player.proto

package player_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DraftPickServiceClient is the client API for DraftPickService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DraftPickServiceClient interface {
	GetPlayers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Players, error)
}

type draftPickServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDraftPickServiceClient(cc grpc.ClientConnInterface) DraftPickServiceClient {
	return &draftPickServiceClient{cc}
}

func (c *draftPickServiceClient) GetPlayers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Players, error) {
	out := new(Players)
	err := c.cc.Invoke(ctx, "/player_proto.DraftPickService/GetPlayers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DraftPickServiceServer is the server API for DraftPickService service.
// All implementations must embed UnimplementedDraftPickServiceServer
// for forward compatibility
type DraftPickServiceServer interface {
	GetPlayers(context.Context, *emptypb.Empty) (*Players, error)
	mustEmbedUnimplementedDraftPickServiceServer()
}

// UnimplementedDraftPickServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDraftPickServiceServer struct {
}

func (UnimplementedDraftPickServiceServer) GetPlayers(context.Context, *emptypb.Empty) (*Players, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayers not implemented")
}
func (UnimplementedDraftPickServiceServer) mustEmbedUnimplementedDraftPickServiceServer() {}

// UnsafeDraftPickServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DraftPickServiceServer will
// result in compilation errors.
type UnsafeDraftPickServiceServer interface {
	mustEmbedUnimplementedDraftPickServiceServer()
}

func RegisterDraftPickServiceServer(s grpc.ServiceRegistrar, srv DraftPickServiceServer) {
	s.RegisterService(&DraftPickService_ServiceDesc, srv)
}

func _DraftPickService_GetPlayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DraftPickServiceServer).GetPlayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player_proto.DraftPickService/GetPlayers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DraftPickServiceServer).GetPlayers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// DraftPickService_ServiceDesc is the grpc.ServiceDesc for DraftPickService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DraftPickService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "player_proto.DraftPickService",
	HandlerType: (*DraftPickServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlayers",
			Handler:    _DraftPickService_GetPlayers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "player.proto",
}
